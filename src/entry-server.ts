import fs from 'fs'

import { renderToString } from '@vue/server-renderer'
import { Request } from 'express'
import { createSSRApp } from 'vue'

import Main from './Main.vue'
import { initApp } from './initApp'
import { makeRouter } from './router/makeRouter'
import { Render, SSRContextVite } from './ssr/server'

const renderPreloadLink = (filePath: string): string => {
  if (filePath.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${filePath}">`
  } else if (filePath.endsWith('.css')) {
    return `<link rel="stylesheet" href="${filePath}">`
  } else if (filePath.endsWith('.woff')) {
    return ` <link rel="preload" href="${filePath}" as="font" type="font/woff" crossorigin>`
  } else if (filePath.endsWith('.woff2')) {
    return ` <link rel="preload" href="${filePath}" as="font" type="font/woff2" crossorigin>`
  } else if (filePath.endsWith('.gif')) {
    return ` <link rel="preload" href="${filePath}" as="image" type="image/gif">`
  } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${filePath}" as="image" type="image/jpeg">`
  } else if (filePath.endsWith('.png')) {
    return ` <link rel="preload" href="${filePath}" as="image" type="image/png">`
  } else {
    // TODO
    return ''
  }
}

export type SsrManifest = Record<string, string[]>

const renderPreloadLinks = (modules: string[], manifest: SsrManifest): string => {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const filePaths = manifest[id]
    if (filePaths) {
      filePaths.forEach((filePath) => {
        if (!seen.has(filePath)) {
          seen.add(filePath)
          links += renderPreloadLink(filePath)
        }
      })
    }
  })
  fs.writeFileSync('./seen.json', JSON.stringify([...seen.values()]), 'utf-8')
  return links
}

export const render: Render = (req: Request, manifest) => {
  const app = createSSRApp(Main)
  const router = makeRouter()
  app.use(router)
  const ssrContext: SSRContextVite = { req }
  const initialState = {}
  initApp({ app, router, ssrContext, initialState })

  // set the router to the desired URL before rendering
  router.push(req.originalUrl)
  return router.isReady().then(() => {
    // passing SSR context object which will be available via `useSSRContext`()
    // @vitejs/plugin-vue injects code into a component's setup() that registers
    // itself on ctx.modules. After the render, ctx.modules would contain all the
    // components that have been instantiated during this render call.
    return renderToString(app, ssrContext).then((html) => {
      // the SSR manifest generated by Vite contains module -> chunk/asset mapping
      // which we can then use to determine what files need to be preloaded for this
      // request.
      const preloadLinks = renderPreloadLinks(ssrContext.modules, manifest)
      const initScripts = `<script>window.__INITIAL_STATE__=${JSON.stringify(initialState)}</script>`
      return { html, preloadLinks, initScripts }
    })
  })
}
